// src/middleware/teacher/courseTeacherAPI.js
import axios from "axios";

const API_BASE = `${process.env.REACT_APP_API_URL}/api/teacher/course`;

/* =====================
 * ‚öôÔ∏è Helper: Header c√≥ token
 * ===================== */
const getAuthHeader = () => {
  const token = localStorage.getItem("accessToken");
  if (!token) {
    console.warn("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y token trong localStorage");
  }
  return {
    headers: {
      Authorization: `Bearer ${token}`,
      "Content-Type": "application/json",
      "ngrok-skip-browser-warning": "true",
    },
  };
};

/* =====================
 * üìò COURSE API
 * ===================== */

// ‚úÖ L·∫•y t·∫•t c·∫£ kh√≥a h·ªçc c·ªßa gi√°o vi√™n
export const getTeacherCourses = async () => {
  try {
    const res = await axios.get(API_BASE, getAuthHeader());
    return res.data?.courses || res.data || [];
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y danh s√°ch kh√≥a h·ªçc:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√≥a h·ªçc");
  }
};

// ‚úÖ L·∫•y chi ti·∫øt 1 kh√≥a h·ªçc
export const getTeacherCourseDetail = async (courseId) => {
  try {
    const res = await axios.get(`${API_BASE}/${courseId}`, getAuthHeader());
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói l·∫•y chi ti·∫øt kh√≥a h·ªçc:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt kh√≥a h·ªçc");
  }
};

// ‚úÖ T·∫°o m·ªõi kh√≥a h·ªçc
export const createTeacherCourse = async (courseData) => {
  try {
    const res = await axios.post(API_BASE, courseData, getAuthHeader());
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o kh√≥a h·ªçc:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o kh√≥a h·ªçc m·ªõi");
  }
};

// ‚úÖ C·∫≠p nh·∫≠t kh√≥a h·ªçc
export const updateTeacherCourse = async (courseId, courseData) => {
  try {
    const res = await axios.put(`${API_BASE}/${courseId}`, courseData, getAuthHeader());
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t kh√≥a h·ªçc:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t kh√≥a h·ªçc");
  }
};

// ‚úÖ X√≥a kh√≥a h·ªçc
export const deleteTeacherCourse = async (courseId) => {
  try {
    const res = await axios.delete(`${API_BASE}/${courseId}`, getAuthHeader());
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a kh√≥a h·ªçc:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a kh√≥a h·ªçc");
  }
};

/* =====================
 * üìö CHAPTER API
 * ===================== */

// ‚úÖ T·∫°o ch∆∞∆°ng trong kh√≥a h·ªçc
export const createChapter = async (courseId, chapterData) => {
  try {
    const res = await axios.post(
      `${API_BASE}/${courseId}/chapter`,
      chapterData,
      getAuthHeader()
    );
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o ch∆∞∆°ng:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o ch∆∞∆°ng");
  }
};

// ‚úÖ C·∫≠p nh·∫≠t ch∆∞∆°ng
export const updateChapter = async (chapterId, chapterData) => {
  try {
    const res = await axios.put(
      `${API_BASE}/chapter/${chapterId}`,
      chapterData,
      getAuthHeader()
    );
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói c·∫≠p nh·∫≠t ch∆∞∆°ng:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ch∆∞∆°ng");
  }
};

// ‚úÖ X√≥a ch∆∞∆°ng
export const deleteChapter = async (chapterId) => {
  try {
    const res = await axios.delete(
      `${API_BASE}/chapter/${chapterId}`,
      getAuthHeader()
    );
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a ch∆∞∆°ng:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a ch∆∞∆°ng");
  }
};

/* =====================
 * üé¨ VIDEO API
 * ===================== */

// ‚úÖ T·∫°o video trong ch∆∞∆°ng
export const createVideo = async (chapterId, videoData) => {
  try {
    const res = await axios.post(
      `${API_BASE}/${chapterId}/video`,
      videoData,
      getAuthHeader()
    );
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói t·∫°o video:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ t·∫°o video");
  }
};

// ‚úÖ X√≥a video
export const deleteVideo = async (videoId) => {
  try {
    const res = await axios.delete(
      `${API_BASE}/video/${videoId}`,
      getAuthHeader()
    );
    return res.data;
  } catch (err) {
    console.error("‚ùå L·ªói x√≥a video:", err.response || err);
    throw new Error(err.response?.data?.message || "Kh√¥ng th·ªÉ x√≥a video");
  }
};
