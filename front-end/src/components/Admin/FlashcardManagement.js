import React, { useEffect, useState } from "react";
import {
  getPublicSets,
  getFlashcardSet,
  createFlashcardSet,
  updateFlashcardSet,
  deleteFlashcardSet,
  createFlashcardItem,
  updateFlashcardItem,
  deleteFlashcardItem,
} from "../../middleware/admin/adminFlashcardAPI";
import { Modal, Button, Form, Spinner } from "react-bootstrap";
import Swal from "sweetalert2";

export function FlashcardManagement() {
  const [sets, setSets] = useState([]);
  const [loading, setLoading] = useState(true);
  const [selectedSet, setSelectedSet] = useState(null);

  const [showSetModal, setShowSetModal] = useState(false);
  const [showItemModal, setShowItemModal] = useState(false);

  const [setForm, setSetForm] = useState({ title: "", description: "" });
  const [itemForm, setItemForm] = useState({
    frontText: "",
    backText: "",
    example: "",
    setID: null,
  });

  // üü¢ Load danh s√°ch set
  const loadSets = async () => {
    try {
      setLoading(true);
      const data = await getPublicSets();
      if (data) setSets(data);
    } catch (err) {
      Swal.fire("L·ªói t·∫£i d·ªØ li·ªáu", `${err?.message || err}`, "error");
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    loadSets();
  }, []);

  // üü° Ch·ªçn 1 set ƒë·ªÉ xem chi ti·∫øt
  const handleSelectSet = async (setId) => {
    try {
      const detail = await getFlashcardSet(setId);
      setSelectedSet(detail);
    } catch (err) {
      Swal.fire("Kh√¥ng th·ªÉ t·∫£i chi ti·∫øt", err?.message || err, "error");
    }
  };

  // ‚ûï M·ªü modal t·∫°o ho·∫∑c s·ª≠a Set
  const handleOpenSetModal = (set = null) => {
    if (set) setSetForm({ ...set });
    else setSetForm({ title: "", description: "" });
    setShowSetModal(true);
  };

  // üíæ L∆∞u Set (th√™m ho·∫∑c s·ª≠a)
  const handleSaveSet = async () => {
    if (!setForm.title) {
      Swal.fire("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p ti√™u ƒë·ªÅ Flashcard Set", "warning");
      return;
    }

    try {
      if (setForm.setID) await updateFlashcardSet(setForm.setID, setForm);
      else await createFlashcardSet(setForm);

      Swal.fire("Th√†nh c√¥ng", "ƒê√£ l∆∞u Flashcard Set!", "success");
      setShowSetModal(false);
      loadSets();
    } catch (err) {
      handleApiError(err);
    }
  };

  // üóëÔ∏è X√≥a Set
  const handleDeleteSet = (setId) => {
    Swal.fire({
      title: "X√°c nh·∫≠n x√≥a?",
      text: "H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "X√≥a",
      cancelButtonText: "H·ªßy",
    }).then(async (res) => {
      if (res.isConfirmed) {
        try {
          await deleteFlashcardSet(setId);
          Swal.fire("ƒê√£ x√≥a!", "Flashcard Set ƒë√£ b·ªã x√≥a.", "success");
          setSelectedSet(null);
          loadSets();
        } catch (err) {
          handleApiError(err);
        }
      }
    });
  };

  // ‚ûï M·ªü modal th√™m/s·ª≠a Item
  const handleOpenItemModal = (item = null, setID = null) => {
    if (item)
      // backend tr·∫£ frontText/backText/example/itemID
      setItemForm({
        frontText: item.frontText ?? "",
        backText: item.backText ?? "",
        example: item.example ?? "",
        itemID: item.itemID, // n·∫øu s·ª≠a
        setID,
      });
    else
      setItemForm({
        frontText: "",
        backText: "",
        example: "",
        setID,
      });

    setShowItemModal(true);
  };

  // üíæ L∆∞u Item
  const handleSaveItem = async () => {
    if (!itemForm.frontText || !itemForm.backText) {
      Swal.fire("Thi·∫øu d·ªØ li·ªáu", "Vui l√≤ng nh·∫≠p Thu·∫≠t ng·ªØ v√† Nghƒ©a c·ªßa n√≥", "warning");
      return;
    }

    try {
      // payload g·ª≠i ƒë√∫ng keys m√† backend mong ƒë·ª£i
      const payload = {
        setID: itemForm.setID,
        frontText: itemForm.frontText,
        backText: itemForm.backText,
        example: itemForm.example ?? null,
      };

      if (itemForm.itemID) {
        // update: m·ªôt s·ªë API c·∫≠p nh·∫≠t require body gi·ªëng create; n·∫øu backend c·∫ßn kh√°c b·∫°n ƒëi·ªÅu ch·ªânh
        await updateFlashcardItem(itemForm.itemID, payload);
      } else {
        await createFlashcardItem(payload);
      }

      Swal.fire("Th√†nh c√¥ng", "ƒê√£ l∆∞u Flashcard Item!", "success");
      setShowItemModal(false);
      const detail = await getFlashcardSet(itemForm.setID);
      setSelectedSet(detail);
    } catch (err) {
      handleApiError(err);
    }
  };

  // üóëÔ∏è X√≥a Item
  const handleDeleteItem = (itemId, setID) => {
    Swal.fire({
      title: "X√°c nh·∫≠n x√≥a?",
      text: "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a Flashcard Item n√†y?",
      icon: "warning",
      showCancelButton: true,
      confirmButtonText: "X√≥a",
    }).then(async (res) => {
      if (res.isConfirmed) {
        try {
          await deleteFlashcardItem(itemId);
          Swal.fire("ƒê√£ x√≥a!", "Flashcard Item ƒë√£ b·ªã x√≥a.", "success");
          const detail = await getFlashcardSet(setID);
          setSelectedSet(detail);
        } catch (err) {
          handleApiError(err);
        }
      }
    });
  };

  // üö® X·ª≠ l√Ω l·ªói API (403, 404, 500...)
  const handleApiError = (err) => {
    if (!err?.response) {
      Swal.fire("L·ªói k·∫øt n·ªëi", err?.message || "Unknown error", "error");
      return;
    }

    const { status, data } = err.response;
    let msg = data?.message || "ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh.";

    if (status === 403) msg = "B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p t√†i nguy√™n n√†y (403).";
    else if (status === 404) msg = "Kh√¥ng t√¨m th·∫•y t√†i nguy√™n (404).";
    else if (status === 500) msg = "L·ªói m√°y ch·ªß (500).";

    Swal.fire(`L·ªói ${status}`, msg, "error");
  };

  return (
    <div className="container py-4">
      <div className="d-flex justify-content-between align-items-center mb-3">
        <Button onClick={() => handleOpenSetModal()}>+ Th√™m Flashcard Set</Button>
      </div>

      {/* Loading */}
      {loading && (
        <div className="text-center py-5">
          <Spinner animation="border" variant="primary" />
        </div>
      )}

      {/* Danh s√°ch Set */}
      {!loading && (
        <div className="row">
          {sets.length > 0 ? (
            sets.map((set) => (
              <div key={set.setID} className="col-md-4 mb-3">
                <div className="card shadow-sm p-3 h-100">
                  <h5>{set.title}</h5>
                  <p>{set.description}</p>
                  <div className="d-flex gap-2 mt-auto">
                    <Button
                      size="sm"
                      variant="secondary"
                      onClick={() => handleSelectSet(set.setID)}
                    >
                      Xem
                    </Button>
                    <Button size="sm" onClick={() => handleOpenSetModal(set)}>
                      S·ª≠a
                    </Button>
                    <Button
                      size="sm"
                      variant="danger"
                      onClick={() => handleDeleteSet(set.setID)}
                    >
                      X√≥a
                    </Button>
                  </div>
                </div>
              </div>
            ))
          ) : (
            <div className="text-center text-muted py-5">
              Kh√¥ng c√≥ Flashcard Set n√†o.
            </div>
          )}
        </div>
      )}

      {/* Chi ti·∫øt Set */}
      {selectedSet && (
        <div className="mt-4">
          <h4>üìó {selectedSet.title}</h4>
          <p>{selectedSet.description}</p>
          <Button onClick={() => handleOpenItemModal(null, selectedSet.setID)}>
            + Th√™m Item
          </Button>

          <ul className="list-group mt-3">
            {selectedSet.items?.map((item) => (
              <li
                key={item.itemID}
                className="list-group-item d-flex justify-content-between align-items-start"
              >
                <div>
                  <div>
                    <strong style={{ fontSize: 16 }}>{item.frontText}</strong> ‚Äî{" "}
                    <span style={{ fontSize: 15 }}>{item.backText}</span>
                  </div>
                  {item.example ? (
                    <div style={{ fontSize: 13, color: "#666", marginTop: 6 }}>
                      V√≠ d·ª•: {item.example}
                    </div>
                  ) : null}
                </div>

                <div>
                  <Button
                    size="sm"
                    className="me-2"
                    onClick={() => handleOpenItemModal(item, selectedSet.setID)}
                  >
                    S·ª≠a
                  </Button>
                  <Button
                    size="sm"
                    variant="danger"
                    onClick={() =>
                      handleDeleteItem(item.itemID, selectedSet.setID)
                    }
                  >
                    X√≥a
                  </Button>
                </div>
              </li>
            ))}
            {selectedSet.items?.length === 0 && (
              <li className="list-group-item text-muted">Ch∆∞a c√≥ Item n√†o.</li>
            )}
          </ul>
        </div>
      )}

      {/* Modal Set */}
      <Modal show={showSetModal} onHide={() => setShowSetModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>
            {setForm.setID ? "S·ª≠a Flashcard Set" : "Th√™m Flashcard Set"}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Ti√™u ƒë·ªÅ</Form.Label>
              <Form.Control
                value={setForm.title}
                onChange={(e) =>
                  setSetForm({ ...setForm, title: e.target.value })
                }
              />
            </Form.Group>
            <Form.Group>
              <Form.Label>M√¥ t·∫£</Form.Label>
              <Form.Control
                value={setForm.description}
                onChange={(e) =>
                  setSetForm({ ...setForm, description: e.target.value })
                }
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowSetModal(false)}>
            H·ªßy
          </Button>
          <Button onClick={handleSaveSet}>L∆∞u</Button>
        </Modal.Footer>
      </Modal>

      {/* Modal Item */}
      <Modal show={showItemModal} onHide={() => setShowItemModal(false)} centered>
        <Modal.Header closeButton>
          <Modal.Title>
            {itemForm.itemID ? "S·ª≠a Flashcard Item" : "Th√™m Flashcard Item"}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form>
            <Form.Group className="mb-3">
              <Form.Label>Thu·∫≠t ng·ªØ (Front Text)</Form.Label>
              <Form.Control
                value={itemForm.frontText}
                onChange={(e) =>
                  setItemForm({ ...itemForm, frontText: e.target.value })
                }
              />
            </Form.Group>

            <Form.Group className="mb-3">
              <Form.Label>ƒê·ªãnh nghƒ©a (Back Text)</Form.Label>
              <Form.Control
                value={itemForm.backText}
                onChange={(e) =>
                  setItemForm({ ...itemForm, backText: e.target.value })
                }
              />
            </Form.Group>

            <Form.Group>
              <Form.Label>V√≠ d·ª• (Example)</Form.Label>
              <Form.Control
                value={itemForm.example}
                onChange={(e) =>
                  setItemForm({ ...itemForm, example: e.target.value })
                }
                placeholder="(t√πy ch·ªçn) V√≠ d·ª• minh h·ªça"
              />
            </Form.Group>
          </Form>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowItemModal(false)}>
            H·ªßy
          </Button>
          <Button onClick={handleSaveItem}>L∆∞u</Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
}

export default FlashcardManagement;
