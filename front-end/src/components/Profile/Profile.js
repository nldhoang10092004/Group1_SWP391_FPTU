import React, { useState, useEffect } from "react";
import { Container, Row, Col, Card, Button, Form, Modal, Alert } from "react-bootstrap";
import { FaCog, FaLock, FaCamera, FaTrash, FaUpload, FaArrowLeft } from "react-icons/fa";
import { Link, useNavigate } from "react-router-dom";
import { getUser, updateUser, updateAvatar, changePassword } from "../../middleware/userAPI";
import "./Profile.scss";

const Profile = () => {
  const navigate = useNavigate();
  
  // ‚úÖ FIX 1: Kh·ªüi t·∫°o state v·ªõi object thay v√¨ null
  const [user, setUser] = useState({
    fullName: "",
    email: "",
    bio: "",
    address: "",
    dob: "",
    gender: "",
    phone: "",
  });
  
  const [avatarUrl, setAvatarUrl] = useState("/default-avatar.png"); 
  const [selectedFile, setSelectedFile] = useState(null); 
  const [previewImage, setPreviewImage] = useState(null); 
  const [currentPassword, setCurrentPassword] = useState("");
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");
  const [showAvatarModal, setShowAvatarModal] = useState(false);
  
  // ‚úÖ FIX 2: Th√™m state loading v√† error
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const token = localStorage.getItem("accessToken");
  const storedUser = JSON.parse(localStorage.getItem("user") || "{}");
  let backPath = "/home";

  // ‚úÖ FIX 3: C·∫£i thi·ªán useEffect v·ªõi x·ª≠ l√Ω l·ªói ƒë·∫ßy ƒë·ªß
  useEffect(() => {
    // Ki·ªÉm tra token ngay t·ª´ ƒë·∫ßu
    if (!token) {
      setError("Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem trang n√†y");
      setLoading(false);
      setTimeout(() => navigate("/login"), 2000);
      return;
    }

    let isMounted = true;
    let avatarObjectUrl = null;

    const fetchUserData = async () => {
      try {
        setLoading(true);
        setError(null);

        console.log("üîç ƒêang t·∫£i d·ªØ li·ªáu user...");
        console.log("üîç Stored User:", storedUser);
        
        const data = await getUser(token);
        console.log("‚úÖ D·ªØ li·ªáu user t·ª´ API:", data);

        if (isMounted) {
          // ‚úÖ FIX: L·∫•y email t·ª´ data.email ho·∫∑c storedUser
          const userEmail = data.email || storedUser?.email || storedUser?.username || "";
          
          setUser({
            fullName: data.fullName || storedUser?.fullName || storedUser?.username || "",
            email: userEmail,
            bio: data.bio || "",
            address: data.address || "",
            dob: data.dob ? data.dob.split('T')[0] : "", // ‚úÖ Format ng√†y t·ª´ API
            gender: data.gender || "",
            phone: data.phone || "",
          });
          
          console.log("‚úÖ User state ƒë√£ set:", {
            fullName: data.fullName,
            email: userEmail,
          });
        }

        // L·∫•y avatar
        try {
          const res = await fetch(
            `${process.env.REACT_APP_API_URL || "https://localhost:7010"}/api/user/profile/avatar`,
            { 
              headers: { Authorization: `Bearer ${token}` },
              mode: 'cors'
            }
          );
          
          if (res.ok) {
            const blob = await res.blob();
            avatarObjectUrl = URL.createObjectURL(blob);
            if (isMounted) setAvatarUrl(avatarObjectUrl);
            console.log("‚úÖ Avatar ƒë√£ t·∫£i");
          } else if (res.status === 401) {
            throw new Error("Token h·∫øt h·∫°n");
          } else {
            console.warn("‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c avatar, d√πng default");
          }
        } catch (avatarErr) {
          console.warn("‚ö†Ô∏è L·ªói avatar:", avatarErr.message);
          // Kh√¥ng throw error, ch·ªâ d√πng avatar m·∫∑c ƒë·ªãnh
        }

      } catch (err) {
        console.error("‚ùå L·ªói khi t·∫£i user:", err);
        
        // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
        if (err.response?.status === 401 || err.message === "Token h·∫øt h·∫°n") {
          setError("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. ƒêang chuy·ªÉn v·ªÅ trang ƒëƒÉng nh·∫≠p...");
          localStorage.removeItem("accessToken");
          localStorage.removeItem("user");
          setTimeout(() => navigate("/login"), 2000);
        } else if (err.code === "ERR_NETWORK") {
          setError("Kh√¥ng th·ªÉ k·∫øt n·ªëi t·ªõi server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng ho·∫∑c ƒë·∫£m b·∫£o backend ƒëang ch·∫°y.");
        } else if (err.response?.status === 404) {
          setError("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng.");
        } else {
          setError(`Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu: ${err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh"}`);
        }
      } finally {
        if (isMounted) setLoading(false);
      }
    };

    fetchUserData();

    return () => {
      isMounted = false;
      if (avatarObjectUrl) URL.revokeObjectURL(avatarObjectUrl);
    };
  }, [token, navigate]); // ‚úÖ B·ªè storedUser kh·ªèi dependency

  // ‚úÖ FIX 4: Hi·ªÉn th·ªã loading state
  if (loading) {
    return (
      <Container className="text-center mt-5">
        <div className="spinner-border text-primary" role="status">
          <span className="visually-hidden">Loading...</span>
        </div>
        <p className="mt-3">ƒêang t·∫£i d·ªØ li·ªáu...</p>
      </Container>
    );
  }

  // ‚úÖ FIX 5: Hi·ªÉn th·ªã error state
  if (error) {
    return (
      <Container className="text-center mt-5">
        <Alert variant="danger">
          <Alert.Heading>C√≥ l·ªói x·∫£y ra</Alert.Heading>
          <p>{error}</p>
          <hr />
          <div className="d-flex justify-content-center gap-2">
            <Button variant="outline-danger" onClick={() => window.location.reload()}>
              Th·ª≠ l·∫°i
            </Button>
            <Button variant="outline-secondary" onClick={() => navigate("/home")}>
              V·ªÅ trang ch·ªß
            </Button>
          </div>
        </Alert>
      </Container>
    );
  }

  // üü¢ Ch·ªçn ·∫£nh ƒë·∫°i di·ªán m·ªõi
  const handleFileChange = (e) => {
    const file = e.target.files[0];
    if (file) {
      // ‚úÖ Ki·ªÉm tra k√≠ch th∆∞·ªõc file
      if (file.size > 5 * 1024 * 1024) {
        alert("‚ö†Ô∏è File qu√° l·ªõn! Vui l√≤ng ch·ªçn ·∫£nh d∆∞·ªõi 5MB.");
        return;
      }

      setSelectedFile(file);
      if (previewImage) URL.revokeObjectURL(previewImage);
      setPreviewImage(URL.createObjectURL(file));
    }
  };

  // üü¢ X√≥a ·∫£nh preview
  const handleRemoveAvatar = () => {
    if (previewImage) URL.revokeObjectURL(previewImage);
    setSelectedFile(null);
    setPreviewImage(null);
  };

  // üü¢ C·∫≠p nh·∫≠t avatar l√™n backend
  const handleUpdateAvatar = async () => {
    if (!selectedFile) {
      alert("Vui l√≤ng ch·ªçn ·∫£nh!");
      return;
    }

    try {
      console.log("üì§ ƒêang upload avatar...");
      await updateAvatar(selectedFile, token);

      if (avatarUrl && avatarUrl !== "/default-avatar.png") {
        URL.revokeObjectURL(avatarUrl);
      }
      
      const newAvatarUrl = URL.createObjectURL(selectedFile);
      setAvatarUrl(newAvatarUrl);

      setSelectedFile(null);
      setPreviewImage(null);
      setShowAvatarModal(false);
      alert("‚úÖ C·∫≠p nh·∫≠t avatar th√†nh c√¥ng!");
      console.log("‚úÖ Avatar ƒë√£ c·∫≠p nh·∫≠t");
    } catch (err) {
      console.error("‚ùå L·ªói update avatar:", err);
      const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      alert(`‚ùå L·ªói khi c·∫≠p nh·∫≠t avatar: ${errorMsg}`);
    }
  };

  // üü¢ L∆∞u th√¥ng tin profile
  const handleSaveProfile = async () => {
    try {
      console.log("üì§ ƒêang l∆∞u th√¥ng tin profile...");
      const updatedUser = {
        fullName: user.fullName,
        phone: user.phone,
        bio: user.bio,
        dob: user.dob,
        gender: user.gender,
        address: user.address,
      };
      
      await updateUser(updatedUser, token);
      alert("‚úÖ C·∫≠p nh·∫≠t th√¥ng tin th√†nh c√¥ng!");
      console.log("‚úÖ Profile ƒë√£ c·∫≠p nh·∫≠t");
    } catch (err) {
      console.error("‚ùå L·ªói update profile:", err);
      const errorMsg = err.response?.data?.message || err.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh";
      alert(`‚ùå L·ªói khi c·∫≠p nh·∫≠t th√¥ng tin: ${errorMsg}`);
    }
  };

  // üü¢ ƒê·ªïi m·∫≠t kh·∫©u
  const handlePasswordChange = async (e) => {
    e.preventDefault();
    
    // ‚úÖ Validate ƒë·∫ßu v√†o
    if (!currentPassword || !newPassword || !confirmPassword) {
      alert("‚ö†Ô∏è Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin!");
      return;
    }

    if (newPassword !== confirmPassword) {
      alert("‚ö†Ô∏è M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!");
      return;
    }

    if (newPassword.length < 6) {
      alert("‚ö†Ô∏è M·∫≠t kh·∫©u m·ªõi ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±!");
      return;
    }

    try {
      console.log("üì§ ƒêang ƒë·ªïi m·∫≠t kh·∫©u...");
      await changePassword(currentPassword, newPassword, confirmPassword, token);
      alert("‚úÖ ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng!");
      setCurrentPassword("");
      setNewPassword("");
      setConfirmPassword("");
      console.log("‚úÖ M·∫≠t kh·∫©u ƒë√£ ƒë·ªïi");
    } catch (err) {
      console.error("‚ùå L·ªói ƒë·ªïi m·∫≠t kh·∫©u:", err);
      const errorMsg = err.response?.data?.message || "M·∫≠t kh·∫©u hi·ªán t·∫°i kh√¥ng ƒë√∫ng";
      alert(`‚ùå L·ªói khi ƒë·ªïi m·∫≠t kh·∫©u: ${errorMsg}`);
    }
  };

  return (
    <div className="profile-page">
      <Container className="profile-container py-4">
        <div className="mb-3">
          <Link to={backPath} className="back-link d-inline-flex align-items-center">
            <FaArrowLeft className="me-2" /> Quay l·∫°i
          </Link>
        </div>

        <Row>
          <Col md={4}>
            <Card className="profile-card mb-4">
              <Card.Body className="text-center">
                <div className="avatar-section mb-3">
                  <div 
                    className="avatar-wrapper" 
                    onClick={() => setShowAvatarModal(true)}
                    style={{ cursor: 'pointer' }}
                  >
                    <img
                      src={previewImage || avatarUrl}
                      alt="Avatar"
                      className="profile-avatar"
                      onError={(e) => {
                        e.target.src = "/default-avatar.png";
                      }}
                    />
                    <div className="avatar-overlay">
                      <FaCamera />
                    </div>
                  </div>
                </div>

                <h4 className="profile-name">{user.fullName || "Ch∆∞a c·∫≠p nh·∫≠t"}</h4>
                <p className="profile-email text-muted">{user.email || "Ch∆∞a c√≥ email"}</p>
              </Card.Body>
            </Card>
          </Col>

          <Col md={8}>
            <Card className="settings-card">
              <Card.Body>
                <h4 className="mb-4 d-flex align-items-center">
                  <FaCog className="me-2" /> C√†i ƒë·∫∑t t√†i kho·∫£n
                </h4>

                <Form>
                  <Form.Group className="mb-3">
                    <Form.Label><strong>H·ªç v√† t√™n</strong></Form.Label>
                    <Form.Control
                      type="text"
                      value={user.fullName || ""}
                      onChange={(e) => setUser({ ...user, fullName: e.target.value })}
                      placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>Email</strong></Form.Label>
                    <Form.Control 
                      type="text" 
                      value={user.email || ""} 
                      disabled 
                      style={{ backgroundColor: '#e9ecef' }}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>Gi·ªõi t√≠nh</strong></Form.Label>
                    <Form.Select
                      value={user.gender || ""}
                      onChange={(e) => setUser({ ...user, gender: e.target.value })}
                    >
                      <option value="">-- Ch·ªçn gi·ªõi t√≠nh --</option>
                      <option value="Nam">Nam</option>
                      <option value="N·ªØ">N·ªØ</option>
                      <option value="Kh√°c">Kh√°c</option>
                    </Form.Select>
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>Ng√†y sinh</strong></Form.Label>
                    <Form.Control
                      type="date"
                      value={user.dob || ""}
                      onChange={(e) => setUser({ ...user, dob: e.target.value })}
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>S·ªë ƒëi·ªán tho·∫°i</strong></Form.Label>
                    <Form.Control
                      type="text"
                      value={user.phone || ""}
                      onChange={(e) => setUser({ ...user, phone: e.target.value })}
                      placeholder="Nh·∫≠p s·ªë ƒëi·ªán tho·∫°i"
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>ƒê·ªãa ch·ªâ</strong></Form.Label>
                    <Form.Control
                      type="text"
                      value={user.address || ""}
                      onChange={(e) => setUser({ ...user, address: e.target.value })}
                      placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label><strong>Gi·ªõi thi·ªáu b·∫£n th√¢n</strong></Form.Label>
                    <Form.Control
                      as="textarea"
                      rows={3}
                      value={user.bio || ""}
                      onChange={(e) => setUser({ ...user, bio: e.target.value })}
                      placeholder="Vi·∫øt v√†i d√≤ng v·ªÅ b·∫£n th√¢n..."
                    />
                  </Form.Group>

                  <Button variant="dark" className="btn-black" onClick={handleSaveProfile}>
                    L∆∞u thay ƒë·ªïi
                  </Button>
                </Form>

                <hr className="my-4" />

                <h5 className="mb-3 d-flex align-items-center">
                  <FaLock className="me-2" /> ƒê·ªïi m·∫≠t kh·∫©u
                </h5>
                <Form onSubmit={handlePasswordChange}>
                  <Form.Group className="mb-3">
                    <Form.Label>M·∫≠t kh·∫©u hi·ªán t·∫°i</Form.Label>
                    <Form.Control
                      type="password"
                      value={currentPassword}
                      onChange={(e) => setCurrentPassword(e.target.value)}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u hi·ªán t·∫°i"
                    />
                  </Form.Group>

                  <Form.Group className="mb-3">
                    <Form.Label>M·∫≠t kh·∫©u m·ªõi</Form.Label>
                    <Form.Control
                      type="password"
                      value={newPassword}
                      onChange={(e) => setNewPassword(e.target.value)}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u m·ªõi (t·ªëi thi·ªÉu 6 k√Ω t·ª±)"
                    />
                  </Form.Group>

                  <Form.Group className="mb-4">
                    <Form.Label>X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi</Form.Label>
                    <Form.Control
                      type="password"
                      value={confirmPassword}
                      onChange={(e) => setConfirmPassword(e.target.value)}
                      placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u m·ªõi"
                    />
                  </Form.Group>

                  <Button variant="dark" className="btn-black" type="submit">
                    ƒê·ªïi m·∫≠t kh·∫©u
                  </Button>
                </Form>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </Container>

      <Modal show={showAvatarModal} onHide={() => setShowAvatarModal(false)} centered className="avatar-modal">
        <Modal.Header closeButton>
          <Modal.Title>Thay ƒë·ªïi ·∫£nh ƒë·∫°i di·ªán</Modal.Title>
        </Modal.Header>
        <Modal.Body className="text-center">
          <div className="current-avatar mb-4">
            <img
              src={previewImage || avatarUrl}
              alt="Current Avatar"
              className="modal-avatar"
              onError={(e) => {
                e.target.src = "/default-avatar.png";
              }}
            />
          </div>

          <p className="text-muted mb-4">
            Ch·ªçn ·∫£nh m·ªõi ƒë·ªÉ c·∫≠p nh·∫≠t. ·∫¢nh s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông c·∫Øt v√† l∆∞u.
          </p>

          <div className="avatar-options">
            <div className="option-item">
              <label htmlFor="avatar-upload" className="upload-option">
                <FaUpload className="option-icon" /> <span>Ch·ªçn ·∫£nh t·ª´ thi·∫øt b·ªã</span>
              </label>
              <input
                id="avatar-upload"
                type="file"
                accept="image/*"
                onChange={handleFileChange}
                style={{ display: "none" }}
              />
            </div>

            {(selectedFile || previewImage) && (
              <div className="option-item">
                <button className="remove-option" onClick={handleRemoveAvatar}>
                  <FaTrash className="option-icon" /> <span>X√≥a ·∫£nh ƒë√£ ch·ªçn</span>
                </button>
              </div>
            )}
          </div>

          <div className="upload-info mt-4">
            <small className="text-muted">
              ‚Ä¢ ƒê·ªãnh d·∫°ng: JPG, PNG, GIF<br />
              ‚Ä¢ K√≠ch th∆∞·ªõc t·ªëi ƒëa: 5MB<br />
              ‚Ä¢ Khuy·∫øn ngh·ªã: ·∫¢nh vu√¥ng 200x200px
            </small>
          </div>
        </Modal.Body>
        <Modal.Footer>
          <Button
            variant="secondary"
            onClick={() => {
              setShowAvatarModal(false);
              handleRemoveAvatar();
            }}
          >
            H·ªßy
          </Button>
          <Button 
            variant="dark" 
            className="btn-black" 
            onClick={handleUpdateAvatar} 
            disabled={!selectedFile}
          >
            C·∫≠p nh·∫≠t
          </Button>
        </Modal.Footer>
      </Modal>
    </div>
  );
};

export default Profile;